#+title: AlETH Router
#+author: Wary

The AlETH Router is a smart contract helper which simplifies the borrowing of ETH debt with Alchemix üßô‚Äçü™Ñüí∏. It mints alETH debt from an Alchemix account, exchange it for ETH using Curve then send the ETH to the recipient.


* üåç Overview

The AlETH Router is a smart contract written in Solidity that uses:
- the [[https://alchemix.fi/][Alchemix Protocol]] to manage users self repaying debt
- the [[https://curve.fi][Curve Protocol]] to exchange alETH and ETH


* üßê How to use

‚ö† Prerequisites:
- Deposit enough funds to the =alETH AlchemistV2= contract

** To borrow some =Self Repaying ETH=, you need to:
- Allow the =AlETHRouter= contract to mint enough =alETH= debt to cover future borrows by calling =alchemistV2.approveMint(<alETHRouter>, <amount>)=
- Borrow some =Self Repaying ETH= from your =Alchemix= account and send them to you by calling =alETHRouter.borrowAndSendETH(<your address>, <amount>)=. It mints =alETH= debt to your =Alchemix= account and exchange it for =ETH= using the =Curve= exchange

** To allow another =Ethereum= account (i.e. EOA or SC) to borrow =ETH= from your account, you need to:
- Allow the =AlETHRouter= contract to mint enough =alETH= debt to cover future borrows by calling =alchemistV2.approveMint(<alETHRouter>, <amount>)=
- Allow a borrower (i.e. EOA or smart contract) to borrow =Self Repaying ETH= from you by calling =alETHRouter.approve(<borrower address>, <ammount>)=
- The borrower can then call =alETHRouter.borrowAndSendETHFrom(<your address>, <their address>, <amount>)= to borrow some =Self Repaying ETH= from your account


* üöö How to install

‚ö† Prerequisites:
- [[https://git-scm.com/downloads][git]]
- [[https://www.rust-lang.org/][rust]]
- [[https://book.getfoundry.sh/getting-started/installation][foundry]]
- [[https://stedolan.github.io/jq/][jq]]

Clone this repository and install the dependencies
#+begin_src bash
git clone git@github.com:The-Wary-One/aleth-router.git
mkdir aleth-router
forge install
#+end_src


* üë∑ How to test

The tests needs to be run in a Mainnet fork.
Set the environment variables with your API keys
#+begin_src bash
cat .env.example > .env
vim .env
#+end_src

Run the tests
#+begin_src bash
forge test
#+end_src


* üèÉ How to run locally

Set the environment variables with your API keys
#+begin_src bash
cat .env.example > .env
vim .env
#+end_src

Start [[https://book.getfoundry.sh/anvil/][anvil]] as a Mainnet fork in a terminal
#+begin_src bash
./tasks/start-fork-local.sh
#+end_src

Run the local setup task
#+begin_src bash
./tasks/setup-env-local.sh
#+end_src

Now play with the contract using the other tasks inside the =tasks= directory. ü•≥
